#+TITLE: POLYFY - A Tool for verifying arithmetic circuits using Symbolic Computer Algebra
#+AUTHOR: Tom Peham

Developer: Tom Peham

* General Information

This tool was developed during the Masters course /Hardware Design/ at the /Johannes Kepler University/. It implements
the basic method of circuit verification by means of /Symbolic Computer Algebra/ (SCA). The interested reader is
encouraged to study the relevant literature(*TODO*) for more details. This implementation doesn't apply any advanced
techniques necessary to verify complicated multiplier circuits.

** Hardware Verification

Hardware verification is the task of proving that a given circuit correctly implements a given specification. As this is
equivalent to the task of identifying the equality of two boolean functions this problem NP-complete. There are types of
circuits (adder circuits for example) that modern SAT solvers can verify efficiently. But SAT solvers usually fail when
it comes to multiplier circuits.

** SCA

For multiplier circuits it turns out that verfication using SCA is often quite efficient. For this method the circuit
implementation and the specification are interpreted as polynomials. Using Gröbner Basis theory one can prove that a
circuit is correct if and only if the reduction of the specification polynomial by the circuit polynomials yields a
remainder of 0.

* Usage

** System Requirements

** Build and Run

* Implementation Details and Design Decisions

The main SCA routine is the [[./src/Ideal.cpp::105]][reduce] method.
** Term

A term is a power product of circuit variables. Since the variables can only take on values of *0* or *1*, the relation
~x^2=x~ holds for every variable ~x~. Instead of 
** Monomial

A monomial is a coefficient
# ** SCA

# Gröbner Bases are a powerful tool used in many applications. Given a set of variables ~X~ and and /admissible/ ordering on
# the monomials over ~X~, a Gröbner Base ~G~ is a subset of a polynomial Ring over ~X~ such that the reduction of any
# polynomial by ~G~ gives a unique remainder. 

# A circuit is comprised of /input wires/, /output wires/ and /logic gates/ that are also connected via wires. Every
# circuit gate implements some elementary boolean function such as a logical /AND/, /XOR/, etc. Every gate also induces a
# polynomial relationship between the inputs and output of the gate. For example the the logical and ~c = a&b~, where ~a~
# and ~b~ are boolean variables, implies the polynomial relation ~0 = c - ab~ in multivariate polynomials over the ring of
# Integers. Interpreting every gate in a circuit as a polynomial gives rise to a description of the entire circuit as a
# set of polynomials. Additionally defining the admissible ordering induced by the topological order of the circuit
# variables the set of circuit polynomials actually form a Gröbner Basis.


